import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Book {
    // ... (unchanged)
    
    private LocalDate dueDate;

    public Book(String title, String author, String genre) {
        // ... (unchanged)
        this.dueDate = LocalDate.now().plusDays(14); // Assume a due date of 14 days from the current date
    }

    public LocalDate getDueDate() {
        return dueDate;
    }

    public double calculateFine() {
        long overdueDays = LocalDate.now().compareTo(dueDate);
        if (overdueDays > 0) {
            // Assuming a fixed fine of $1 per overdue day
            return overdueDays * 1.0;
        } else {
            return 0.0;
        }
    }

    @Override
    public String toString() {
        return "Title: " + getTitle() +
                "\nAuthor: " + getAuthor() +
                "\nGenre: " + getGenre() +
                "\nAvailability: " + (isAvailable() ? "Available" : "Not Available") +
                "\nDue Date: " + getDueDate() +
                "\n-----------------------------";
    }
}

class Patron {
    // ... (unchanged)

    public void returnBook(Book book) {
        borrowingHistory.remove(book);
        book.setAvailable(true);
        
        // Calculate and display fines
        double fine = book.calculateFine();
        if (fine > 0) {
            System.out.println("Book returned overdue. Fine: $" + fine);
        } else {
            System.out.println("Book returned successfully.");
        }
    }
    
    // ... (unchanged)
}

class LibraryManagementSystemWithFine {
    // ... (unchanged)

    public static void main(String[] args) {
        // ... (unchanged)

        int choice;
        do {
            System.out.println("Library Management System Menu:");
            System.out.println("1. Display Books");
            System.out.println("2. Display Patrons");
            System.out.println("3. Check Out a Book");
            System.out.println("4. Return a Book");
            System.out.println("0. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                // ... (unchanged)
                case 4:
                    // Return a Book
                    scanner.nextLine(); // Consume the newline character
                    System.out.print("Enter patron name: ");
                    String returnPatronName = scanner.nextLine();
                    Patron returnPatron = patronManager.getPatronByName(returnPatronName);
                    if (returnPatron != null) {
                        System.out.print("Enter the title of the book to return: ");
                        String returnTitle = scanner.nextLine();
                        Book returnBook = bookManager.getBookByTitle(returnTitle);
                        if (returnBook != null && !returnBook.isAvailable() && returnPatron.getBorrowingHistory().contains(returnBook)) {
                            returnPatron.returnBook(returnBook);
                        } else {
                            System.out.println("Book \"" + returnTitle + "\" cannot be returned.");
                        }
                    } else {
                        System.out.println("Patron \"" + returnPatronName + "\" not found.");
                    }
                    break;
                // ... (unchanged)
            }

        } while (choice != 0);

        scanner.close();
    }
}
